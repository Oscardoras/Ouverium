import "Type.fl";
import "containers/Map.fl";
import "containers/Set.fl";


class Event {
    Event : () |-> {
        this := ();
        this :~ Event;

        this._callbacks := Set[];

        this
    };

    Event:::(this |-> (
        args |-> {
            foreach(this._callbacks._array, callback |-> {
                callback(args);
            });
        }
    ));


    table := Map[];

    Event.add_listener : (key, Function callback) |-> {
        if (!table.has(key)) {
            table[key] := Set[];
        };

        table[key].insert(callback);
    };

    Event.remove_listener : (key, Function callback) |-> {
        if (table.has(key)) {
            table[key].remove(callback);
        };
    };

    Event.invoke : (key, args) |-> {
        if (table.has(key)) {
            table[key].foreach(callback |-> {
                callback(args);
            });
        };
    };
};


(:+=) : (event, callback) \ (event ~ Event & callback ~ Function) |-> {
    event._callbacks.insert(callback);

    event
};

(:-=) : (event, callback) \ (event ~ Event & callback ~ Function) |-> {
    event._callbacks.remove(callback);

    event
};
