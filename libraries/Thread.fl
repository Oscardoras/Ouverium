import "Type.fl";


class Thread;

(~) : (thread, Thread) |-> {
    import("system").thread_is(thread)
};

Thread : (function()) |-> {
    import("system").thread_create(function)
};


Thread::(this.join |-> (
    () |-> {
        import("system").thread_join(this)
    }
));

Thread::(this.detach |-> (
    () |-> {
        import("system").thread_detach(this)
    }
));

Thread::?(this.id |-> (
    import("system").thread_get_id(this)
));


(static Thread)::?(this.current_id |-> {
    import("system").thread_current_id()
});


class Mutex;

(~) : (mutex, Mutex) |-> {
    import("system").mutex_is(mutex)
};

Mutex : () |-> {
    import("system").mutex_create()
};


Mutex::(this.lock |-> (
    () |-> {
        import("system").mutex_lock(this)
    }
));

Mutex::(this.try_lock |-> (
    () |-> {
        import("system").mutex_try_lock(this)
    }
));

Mutex::(this.unlock |-> (
    () |-> {
        import("system").mutex_unlock(this)
    }
));


class Future extends (ConditionVariable,);

async : (code()) |-> {
    future = Future();
    Thread {
        future._value := code();
        future.notify_all();
    };
    future
};
