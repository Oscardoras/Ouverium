import "Type.fl";
import "containers/Iterable.fl";


class Thread;

(~) : (thread, Thread) |-> {
    import("system").thread_is(thread)
};

Thread : (function()) |-> {
    import("system").thread_create(function)
};

Thread::(this.join |-> (
    () |-> {
        import("system").thread_join(this);
    }
));

Thread::(this.detach |-> (
    () |-> {
        import("system").thread_detach(this);
    }
));

Thread::?(this.id |-> (
    import("system").thread_get_id(this)
));

(static Thread)::?(this.current_id |-> {
    import("system").thread_current_id()
});

Thread.sleep : time |-> {
    import("system").thread_sleep(time);
};

(static Thread)::?(this.hardware_concurrency |-> {
    import("system").thread_hardware_concurrency()
});


class Mutex;

(~) : (mutex, Mutex) |-> {
    import("system").mutex_is(mutex)
};

Mutex : () |-> {
    import("system").mutex_create()
};

Mutex::(this.lock |-> (
    () |-> {
        import("system").mutex_lock(this)
    }
));

Mutex::(this.try_lock |-> (
    () |-> {
        import("system").mutex_try_lock(this)
    }
));

Mutex::(this.unlock |-> (
    () |-> {
        import("system").mutex_unlock(this)
    }
));


class Future;

Future : this |-> {
    this :~ Future;

    this._mutex := Mutex();
    this._mutex.lock();

    this
};

Future::(this.wait |-> {
    () |-> {
        this._mutex.lock();
        this._mutex.unlock();
    }
});

Future::?(this.available |-> {
    defined (this.value)
});


async : (code()) |-> {
    future := Future();
    Thread {
        future.value := code();
        future._mutex.unlock();
    };
    future
};


Iterable::(this.parallel |-> (
    (Function function) |-> {
        threads := [];

        it := this.iterator;
        while (it.is_valid()) {
            (value |-> {
                Array.add(threads, Thread { function(value) });
            })(it.get());
            it.next();
        };

        threads.foreach(thread |-> {
            thread.join();
        });
    }
));
