import "Type.fl";


class Iterable {
    Iterable::(this.iterator |-> abstract);
    Iterable::(this.foreach |-> (
        (Function function) |-> {
            it := this.iterator;
            while (it.is_valid()) {
                function(it.get());
                it.next();
            };
        }
    ));

    class (Iterable.Iterator) {
        (Iterable.Iterator)::(this.is_valid |-> abstract);
        (Iterable.Iterator)::(this.get |-> abstract);
        (Iterable.Iterator)::(this.next |-> abstract);
    };
};


class BidirectionalIterable extends Iterable {
    BidirectionalIterable::(this.iterator_begin |-> abstract);
    BidirectionalIterable::(this.iterator_end |-> abstract);

    class (BidirectionalIterable.Iterator) extends (Iterable.Iterator) {
        (BidirectionalIterable.Iterator)::(this.previous |-> abstract);
    };
};


(@) : (element, list) \ (list ~ List) |-> (
    found := false;
    it := list.iterator;
    while (!found & it.is_valid()) {
        if (it.get() == element) {
            found := true;
        };
    };
    found
);

(@==) : (element, list) \ (list ~ List) |-> (
    found := false;
    it := list.iterator;
    while (!found & it.is_valid()) {
        if (it.get() === element) {
            found := true;
        };
    };
    found
);
