import "Type.fl";


class Iterable;
{
    Iterable::(this.iterator |-> abstract);
    Iterable::(this.foreach |-> (
        (Function function) |-> {
            it := this.iterator;
            while (it.is_valid()) {
                function(it.get());
                it.next();
            };
        }
    ));

    class (Iterable.Iterator);
    {
        (Iterable.Iterator)::(this.is_valid |-> abstract);
        (Iterable.Iterator)::(this.get |-> abstract);
        (Iterable.Iterator)::(this.next |-> abstract);
    };
};


class BidirectionalIterable extends Iterable;
{
    BidirectionalIterable::(this.iterator_begin |-> abstract);
    BidirectionalIterable::(this.iterator_end |-> abstract);

    class (BidirectionalIterable.Iterator) extends (Iterable.Iterator);
    {
        (BidirectionalIterable.Iterator)::(this.previous |-> abstract);
    };
};


(@) : (element, list) \ (list ~ List) |-> (
    found := false;
    it := list.iterator;
    while (!found & it.is_valid()) {
        if (it.get() == element) {
            found := true;
        };
    };
    found
);

(@==) : (element, list) \ (list ~ List) |-> (
    found := false;
    it := list.iterator;
    while (!found & it.is_valid()) {
        if (it.get() === element) {
            found := true;
        };
    };
    found
);


class Range extends Iterable;
{
    Range : (Int end) |-> {
        Range(0, end, 1)
    };

    Range : (Int begin, Int end) |-> {
        Range(begin, end, 1)
    };

    Range : (Int begin, Int end, Int s) |-> {
        this :~ Range;

        this.begin := begin;
        this.end := end;
        this.step := s;

        this
    };

    Range::(
        this.iterator |-> {
            Range.Iterator(this, this.begin)
        },
        (this.iterator, value) |-> {}
    );

    class (Range.Iterator) extends (Iterable.Iterator);
    {
        Range.Iterator : (range, index) |-> {
            this :~ Range.Iterator;

            this._range := range;
            this._index := index;

            this
        };

        (Range.Iterator)::(this.is_valid |-> (
            () |-> {
                this._range.begin <= this._index & this._index < this._range.end
            }
        ));

        (Range.Iterator)::(this.get |-> (
            () \ (this.is_valid()) |-> {
                this._index
            }
        ));

        (Range.Iterator)::(this.next |-> (
            () |-> {
                this._index := this._index + this._range.step;
            }
        ));
    }
};
