import "Type.fl";
import "containers/Set.fl";
import "containers/ArrayList.fl";


class ArraySet extends Set;
{
    ArraySet : () |-> {
        this :~ ArraySet;

        this._array := Array[];

        this
    };

    ArraySet::(
        this.length |-> {
            this._array.length
        },
        (this.length, value) |-> {}
    );

    ArraySet::(this.insert |-> (
        value |-> {
            found := false;
            it := this._array.iterator;
            if (it.is_valid()) {
                while (!found) {
                    if (it.get() == value) {
                        found := true;
                        it.get()
                    } else {
                        it.next();
                        if (!it.is_valid()) {
                            found := true;
                            this._array.add_back(value)
                        }
                    }
                }
            } else {
                this._array.add_back(value)
            }
        }
    ));

    ArraySet::(this.remove |-> (
        value |-> {
            found := false;
            it := this.iterator;
            while (!found & it.is_valid()) {
                v := it.get();
                if (v == value) {
                    found := true;
                    it.remove()
                } else {
                    it.next();
                };
            }
        }
    ));

    ArraySet::(
        this.iterator_begin |-> {
            this._array.iterator_begin
        },
        (this.iterator_begin, value) |-> {}
    );

    ArraySet::(
        this.iterator_end |-> {
            this._array.iterator_end
        },
        (this.iterator_end, value) |-> {}
    );

    ArraySet::(
        this.iterator |-> {
            this.iterator_begin
        },
        (this.iterator, value) |-> {}
    );

    ArraySet::(this.get_iterator |-> (
        index |-> {
            ArraySet.Iterator(this, index)
        }
    ));

    ArraySet::(this.get_iterator |-> (
        value |-> {
            found := false;
            it := this.iterator;
            while (!found & it.is_valid()) {
                if (it.get() == value) {
                    found := true;
                } else {
                    it.next();
                };
            };
            it
        }
    ));

    class (ArraySet.Iterator) extends Set.Iterator;
    {
        ArraySet.Iterator : (ArrayList.Iterator it) |-> {
            this :~ ArraySet.Iterator;

            this._it := it;

            this
        };

        (ArraySet.Iterator)::(this.is_valid |-> (
            () |-> {
                this._it.is_valid()
            }
        ));

        (ArraySet.Iterator)::(this.get |-> (
            () \ (this.is_valid()) |-> {
                this._it.get()
            }
        ));

        (ArraySet.Iterator)::(this.remove |-> (
            () \ (this.is_valid()) |-> {
                this._it.remove()
            }
        ));

        (ArraySet.Iterator)::(this.next |-> (
            () |-> {
                this._it.next()
            }
        ));

        (ArraySet.Iterator)::(this.previous |-> (
            () |-> {
                this._it.previous()
            }
        ));
    };
};


Set : ArraySet;
