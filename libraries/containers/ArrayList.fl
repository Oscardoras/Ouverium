import "Type.fl";


ArrayList := Array;
class ArrayList;


ArrayList::(this |-> (
    index \ (index ~ Int & 0 <= index & index < this.length) |-> {
        Array.get(this, index)
    }
));

ArrayList::(this.length |-> {
    Array.length(this)
});

ArrayList::(this.empty |-> {
    this.length == 0
});

ArrayList::(this.foreach |-> (
    function |-> {
        l := this.length;
        list := ArrayList();
        list.reserve(l);
        for i from 0 to l {
            list.add_back(function(this[i]))
        };
        list
    }
));

ArrayList::(this.capacity |-> {
    Array.get_capacity(this)
});

ArrayList::(this.reserve |-> (
    capacity \ (capacity ~ Int & this.capacity <= capacity) |-> {
        c := capacity * 3 / 2;
        Array.set_capacity(this, if (capacity > c) capacity else c)
    }
));

ArrayList::(this.front |-> {
    this[0]
});

ArrayList::(this.back |-> {
    this[this.length - 1]
});

ArrayList::(this.add_front |-> (
    element |-> {
        l := this.length;
        if (l > 0) {
            Array.add(this, this[l-1]);
            for i from (l-1) to 0 step (-1) {
                this[i] := this[i-1]
            };
            this[0] := element
        } else {
            Array.add(this, element)
        }
    }
));

ArrayList::(this.add_back |-> (
    element |-> {
        Array.add(this, element)
    }
));

ArrayList::(this.remove_front |-> (
    () \ (!this.empty) |-> {
        l := this.length;
        value := this[0];
        for i from 0 to (l-1) {
            this[i] := this[i+1]
        };
        Array.remove(this);
        value
    }
));

ArrayList::(this.remove_back |-> (
    () \ (!this.empty) |-> {
        Array.remove(this)
    }
));

ArrayList::(this.insert |-> (
    (index, element) \ (index ~ Int & 0 <= index & index < this.length) |-> {
        l := this.length;
        Array.add(this, this[l-1]);
        for i from (l-1) to index step (-1) {
            this[i] := this[i-1]
        };
        this[index] := element
    }
));

ArrayList::(this.remove |-> (
    index \ (index ~ Int & 0 <= index & index < this.length) |-> {
        l := this.length;
        tmp := this[index];
        for i from index to (l-1) {
            this[i] := this[i+1]
        };
        Array.remove(this);
        tmp
    }
));

ArrayList::(this.resize |-> (
    (size, value) \ (size ~ Int & 0 <= size) |-> {
        if (size < this.length) {
            for i from 0 to (this.length - size) {
                Array.remove(this);
            };
        } else if (size > this.length) {
            Array.reserve(size);
            for i from 0 to (size - this.length) {
                Array.add(this, value);
            };
        };
    } : size \ (size ~ Int & 0 <= size) |-> {
        this.resize(size, ());
    }
));


(@) : (element, list) \ (list ~ ArrayList) |-> (
    exists(list, x |-> {
        x == element
    })
);

(@==) : (element, list) \ (list ~ ArrayList) |-> (
    exists(list, x |-> {
        x === element
    })
);
