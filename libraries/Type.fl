(:~) : (object, type) |-> {
    Array.add(default (object._types), type);
    object
};

(~) := ((object, type) |-> {
    (defined (object._types) & exists(object._types, t |-> {
        t === type
    })) | (defined(type._children) & exists(type._children, child |-> {
        object ~ child
    }))
} : (~));


extends : (type, Tuple parents) |-> {
    foreach(parents, p |-> {
        Array.add(default (p._children), type);
    });

    type
};

class : (type, body()) |-> { class type extends [] (body()) };
class : (type, extends, Tuple parents, body()) \ (!defined type) |-> {
    type := ();

    type : this \ (this ~ type) |-> { this };
    body();

    extends type parents
};


static : type |-> {
    default (type._static)
};

abstract;

(~) : (object, type) \ (defined (object._static)) |-> {
    object._static === type
};

(::);
(:::);

(() |-> {
    types := [];

    default_setter : setter;

    getter : x \ {
        default_setter(found, true);
        default_setter(getters, y |-> {
            default_setter(found, false);
        });
        foreach(types, type |-> {
            if (defined (type._filter) & type._filter(x)) {
                getters : default (type._methods);
                getters : default (type._getters);
            } else if (defined (type._functor_filter) & type._functor_filter(x)) {
                getters : default (type._functors);
            };
        });

        default_setter(r, getters(x));
        false
    } |-> {
        r
    };

    setter : (x, value) \ {
        default_setter(found, true);
        default_setter(setters,  y |-> {
            default_setter(found, false);
        });
        foreach(types, type |-> {
            if (defined (type._filter) & type._filter(x)) {
                setters : default (type._setters);
            };
        });

        default_setter(r, setters(x, value));
        found
    } |-> {
        r
    };

    add_type : type |-> {
        if (!exists(types, x |-> {
            x === type
        })) {
            type._filter : (a |-> false) : ((this. .) \ (this ~ type) |-> true);
            type._functor_filter : (a |-> false) : (this \ (defined this & this ~ type) |-> true);
            Array.add(types, type);
        };
    };

    (::) : (type, Function method_getter) |-> {
        type._methods : method_getter;
        add_type(type);
    };

    (::) : (type, (Function property_getter, Function property_setter)) |-> {
        type._getters : property_getter;
        type._setters : property_setter;
        add_type(type);
    };
    (::) : (type, abstract) |-> {};

    (:::) : (type, functor_getter) |-> {
        type._functors : functor_getter;
        add_type(type);
    };
    (:::) : (type, abstract) |-> {};
})();


default : symbol |-> {
    default symbol ()
};
default : (symbol, default_value) |-> {
    if (!defined symbol) {
        symbol := default_value;
    };
    symbol
};
var : symbol \ (!defined symbol) |-> symbol;
let : symbol \ (!defined symbol) |-> symbol;
