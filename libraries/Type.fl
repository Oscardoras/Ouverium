(:~) : (object, type) |-> {
    Array.add(object._types, type);
    object
};

(~) := ((object, type) |-> {
    defined object._types &
    exists(object._types, x |-> {
        x === type | {
            if (defined type._parents) {
                exists(type._parents, x |-> {
                    x === type
                })
            } else {
                false
            }
        }
    })
} : (~));


extends;

class : type |-> {
    class type extends ()
};
class : (type, extends, parents) |-> {
    if (Array.length(parents) > 0) {
        type._parents := parents
    };

    type : this \ (this ~ type) |-> { this };
    type : () |-> {
        this :~ type;
        this
    };

    type
};


(::);
(::?);
(::=);

(() |-> {
    types := ();

    getter : x \ {
        getters := ();
        foreach(types, type |-> {
            if (type._filter(x)) {
                getters : type._methods;
                getters : type._getters;
            };
        });

        try {
            r := getters(x);
            true
        } catch (e |-> false)
    } |-> {
        r
    };

    # setter : (x, value) \ {
    #     setters;
    #     foreach(types, type |-> {
    #         if (type._filter(x)) {
    #             setters : type._setters;
    #         };
    #     });

    #     try {
    #         r := setters(x, value);
    #         true
    #     } catch (e |-> false)
    # } |-> {
    #     r
    # };

    add_type : type |-> {
        if (!exists(types, x |-> {
            x === type
        })) {
            Array.add(types, type);
            type._filter := (a |-> false) : (this \ (defined this & this ~ type) |-> true) : ((this. .) \ (this ~ type) |-> true);
        };
    };

    (::) : (type, method_getter) |-> {
        type._methods : method_getter;
        add_type(type);
    };

    (::?) : (type, property_getter) |-> {
        type._getters : property_getter;
        add_type(type);
    };

    (::=) : (type, property_setter) |-> {
        type._setters : property_setter;
        add_type(type);
    };
})();
