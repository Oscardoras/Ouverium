import "Type.fl";
import "containers/ArrayList.fl";


class Matrix {
    Matrix.of : shape \ ((shape ~ Int & shape > 0) | (shape ~ Array & forall(shape, x |-> {
        x ~ Int & x > 0
    }))) |-> {
        this := ();
        this :~ Matrix;

        this._shape := if (shape ~ Int) [shape,] else shape;

        this._sizes := Array[];
        product := if (this._shape.size > 0) 1 else 0;
        this._shape.foreach(s |-> {
            this._sizes.add_back(product);
            product := product * s;
        });

        this._array := Array[];
        this._array.resize(product, 0.);

        this
    };

    Matrix::(
        this.shape |-> {
            $(this._shape)
        },
        (this.shape, value) |-> {}
    );

    Matrix::(
        this.dimension |-> {
            this._shape.size
        },
        (this.dimension, value) |-> {}
    );

    Matrix::(
        this.size |-> {
            this._array.size
        },
        (this.size, value) |-> {}
    );

    Matrix::(
        this.length |-> {
            $(this._shape[0])
        },
        (this.length, value) |-> {}
    );

    Matrix:::(this |-> (
        indexes |-> {
            ind := if (indexes ~ Int) [indexes,] else indexes;

            index := 0;
            for i from 0 to (ind.size) {
                index :+= ind[i] * this._sizes[i];
            };

            this._array[index]
        }
    ));

    Matrix.identity : (Int n) |-> {
        matrix := Matrix.of(n, n);

        for i from 0 to n {
            matrix[i,i] := 1.;
        };

        matrix
    };

    Matrix.vectorize : function |-> {
        (Matrix matrix) |-> {
            new_matrix := Matrix.of(matrix.shape);

            for i from 0 to (matrix._array.size) {
                new_matrix._array[i] := function(matrix._array[i]);
            };

            new_matrix
        }
    };
};

($) : (Matrix matrix) |-> {
    new_matrix = Matrix.of(matrix.shape);

    for i from 0 to (matrix._array.size) {
        new_matrix._array[i] = matrix._array[i];
    };

    new_matrix
};


class Vector {
    (~) : (vector, Vector) |-> {
        vector ~ Matrix & vector.dimension == 1
    };

    Vector : (Array array) |-> {
        this := Matrix.of(array.size);

        for i from 0 to (array.size) {
            this[i] := array[i];
        };

        this
    };

    Vector.arange : (start, stop, s) |-> {
        matrix := Matrix.of(Int((stop - start) / s));

        i := 0;
        val := start;
        while (val < stop) {
            matrix[i] := val;
            ++i;
            val :+= s;
        };

        matrix
    };

    Vector.linspace : (start, stop, Int num) |-> {
        matrix := Matrix.of(num);

        if (num > 1) {
            s := (stop - start) / (num-1);
            for i from 0 to num {
                matrix[i] := start + s * i;
            };
        } else {
            matrix[0] := start;
        }

        matrix
    };

    Vector.dot : (a, b) \ (a ~ Vector & b ~ Vector & a.size == b.size) |-> {
        sum := 0.;

        for i from 0 to (a.size) {
            sum :+= a[i] * b[i];
        };

        sum
    };
};
