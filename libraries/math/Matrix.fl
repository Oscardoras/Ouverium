import "Type.fl";
import "containers/Tensor.fl";


class Matrix {
    Matrix.of : shape |-> {
        this := Tensor.of(shape);
        this :~ Matrix;

        this
    };

    Matrix.identity : (Int n) |-> {
        matrix := Matrix.of(n, n);

        for i from 0 to n {
            matrix[i,i] := 1.;
        };

        matrix
    };

    Matrix.vectorize : function |-> {
        (Matrix matrix) |-> {
            new_matrix := Matrix.of(matrix.shape);

            for i from 0 to (matrix._array.size) {
                new_matrix._array[i] := function(matrix._array[i]);
            };

            new_matrix
        }
    };
};

($) : (Matrix matrix) |-> {
    new_matrix = Matrix.of(matrix.shape);

    for i from 0 to (matrix._array.size) {
        new_matrix._array[i] = matrix._array[i];
    };

    new_matrix
};


class Vector {
    (~) : (vector, Vector) |-> {
        vector ~ Matrix & vector.dimension == 1
    };

    Vector : (Array array) |-> {
        this := Matrix.of(array.size);

        for i from 0 to (array.size) {
            this[i] := array[i];
        };

        this
    };

    Vector.arange : (start, stop, s) |-> {
        matrix := Matrix.of(Int((stop - start) / s));

        i := 0;
        val := start;
        while (val < stop) {
            matrix[i] := val;
            ++i;
            val :+= s;
        };

        matrix
    };

    Vector.linspace : (start, stop, Int num) |-> {
        matrix := Matrix.of(num);

        if (num > 1) {
            s := (stop - start) / (num-1);
            for i from 0 to num {
                matrix[i] := start + s * i;
            };
        } else {
            matrix[0] := start;
        }

        matrix
    };

    Vector.dot : (a, b) \ (a ~ Vector & b ~ Vector & a.size == b.size) |-> {
        sum := 0.;

        for i from 0 to (a.size) {
            sum :+= a[i] * b[i];
        };

        sum
    };
};
