import "Type.fl";
import "String.fl";
import "io/Stream.fl";


class TCPSocket {
    (~) : (socket, TCPSocket) |-> {
        import("system").TCPsocket_is(socket)
    };

    TCPSocket : (String address, Int port) |-> {
        import("system").TCPsocket_open(address, port)
    };

    TCPSocket::(this.receive |-> (
        (Int size) |-> {
            import("system").TCPsocket_receive(this, size)
        }
    ));

    TCPSocket::(this.send |-> (
        bytes \ (bytes ~ Array & forall(bytes, b |-> { b ~ Char })) |-> {
            import("system").TCPsocket_send(this, bytes)
        }
    ));

    TCPSocket::(
        this.blocking |-> {
            import("system").TCPsocket_get_blocking(this)
        },
        (this.blocking, value) |-> {
            import("system").TCPsocket_set_blocking(this, value);
            import("system").TCPsocket_get_blocking(this)
        }
    );

    TCPSocket::(this.close |-> (
        () |-> {
            import("system").TCPsocket_close(this)
        }
    ));

    class (TCPSocket.Acceptor) {
        (~) : (acceptor, Type) \ (Type === TCPSocket.Acceptor) |-> {
            import("system").TCPacceptor_is(acceptor)
        };

        TCPSocket.Acceptor : (String address, Int port) |-> {
            import("system").TCPacceptor_open(address, port)
        };

        (TCPSocket.Acceptor)::(
            this.blocking |-> {
                import("system").TCPacceptor_get_blocking(this)
            },
            (this.blocking, value) |-> {
                import("system").TCPacceptor_set_blocking(this, value);
                import("system").TCPacceptor_get_blocking(this)
            }
        );

        (TCPSocket.Acceptor)::(this.accept |-> (
            () |-> {
                import("system").TCPacceptor_accept(this)
            }
        ));

        (TCPSocket.Acceptor)::(this.close |-> (
            () |-> {
                import("system").TCPacceptor_close(this)
            }
        ));
    };
};
