using "data_structures/ArrayList.fl";


String : this |-> {
    ArrayList(this);
    this :~ String;

    this->lower : () |-> {
        this->foreach(c |-> {
            
        })
    };

    this->upper : () |-> {
        this->foreach(c |-> {
            
        })
    };

    this->index_of : (substring ~ String) |-> {
        index := -1;

        i := 0;
        while (index < 0 & i < this->lenght()) {
            j := 0;
            while (j < substring->lenght() & this[i+j] == substring[j]) {
                ++j
            };
            if (j == substring->lenght()) {
                index := i
            };
            ++i
        };

        index
    };

    this->substring : (begin, end) ? (begin ~ Int & end ~ Int & begin <= end) |-> {
        str := String();
        str->set_capacity(end - begin);

        i := begin;
        while (i < end) {
            str->add_last(this[i])
        };

        str
    };

    this
};


(@) : (substring, string) ? (substring ~ String & string ~ String) |-> {
    string->index_of(substring) >= 0
};

(+) : (str1, str2) ? (str1 ~ String & str2 ~ String) |-> {
    str := String();

    (l1,l2) := (str1->lenght(), str2->lenght());
    l := l1+l2;
    str->set_capacity(l);

    i := 1;
    while (i <= l1) {
        str->add_last(get(str1, i))
    };
    i := 1;
    while (i <= l2) {
        str->add_last(get(str2, i))
    };
    
    str
};

(:+) : (str1, str2) ? (str1 ~ String & str2 ~ String) |-> {
    (l1,l2) := (str1->lenght(), str2->lenght());
    l := l1+l2;

    if (str1->get_capacity() < l) {
        str1->set_capacity(l)
    }

    str->set_capacity(l);

    i := 1;
    while (i <= l2) {
        str->add_last(get(str2, i))
    };
    
    str
}