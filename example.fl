test := 3 ;
test2 := solve( x |-> (x + 1 = 4) ) ;
if (1=1) (test := 4)
else (test2 := 4) ;
while (test >= 1) (test := test-1) ;

euclide : (a,b) |-> {
    (a1,b1) := (a,b);
    while (b1 != 0) {
        (a1,b1) := (b1, a1 % b1)
    };
    a1
};
print(euclide(40, 48), "\n");


forall( [a,b,c] like ((a,b,c) ? float*float*float & a != 0) |-> (
    forall( x like (x ? float) |-> (
        if (a*x*x + b*x + c = 0) then (
            delta := b*b -4*a*c ;
            if (delta > 0) then (
                x = (-b-sqrt(delta))/(2*a) | x = (+b-sqrt(delta))/(2*a)
            ) else if (delta = 0) then (
                x = -b/(2*a)
            )
        )
    ))
)) ;

solution := solve( x |-> (2*x*x + x -5 = 3) ) ;
print(solution) ;

list->foreach(x |-> print(x)) ;
for(i |->
    print(i*i)
, 0, 10, 1) ;

Constructor : a |-> {
    this->member := a ;
    this->method : () |-> {
        this->member
    } ;
    this
} ;
obj := Constructor( 4 ) ;
print( obj->method() )