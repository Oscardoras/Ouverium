using "expression/";
using "Position.fl"


TextPosition : (this, line, column) ? (line ~ Int & column ~ Int) |-> {
    Position(this);
    this :~ TextPosition;

    this->line := line;
    this->column := column;

    this
};
TextPosition : (line, column) ? (line ~ Int & column ~ Int) |-> {
    TextPosition((), line, column)
};

Word : (this, word, position) ? (word ~ String & position ~ TextPosition) |-> {
    this :~ Word;

    this->word := word;
    this->position := position;

    this
};
Word : (word, position) ? (word ~ String & position ~ TextPosition) |-> {
    Word((), word, position)
};

get_words : code ? (code ~ String) |-> {
    words := ArrayList();

    b := 0;
    last := "\n";

    is_str := false;
    escape := false;

    line := 1;
    column := 1;

    for i from 0 to (code->lenght()) {
        c := code[i];
        position := TextPosition(line, column);

        if (!is_str) {
            if (c ~ " \n\r\t") {
                if (b < i) words->add_last(Word(code->substring(b, i-b), position));
                b := i+1;
            } else if (c ~ ",()[]{}") {
                if (b < i) words->add_last(Word(code->substring(b, i-b), position));
                std::string s(1,c);
                words.push_back(Word(s, chars[b]));
                b := i+1;
            } else if (c == '\"') {
                if (b < i) words.push_back(Word(code.substr(b, i-b), chars[b]));
                b = i;
                is_str = true;
            } else if (!is_alphanum(last) && is_alphanum(c) && !(std::isdigit(last) && c == '.') && b < i) {
                words.push_back(Word(code.substr(b, i-b), chars[b]));
                b = i;
            } else if (is_alphanum(last) && !is_alphanum(c) && !(last == '.' && std::isdigit(c)) && b < i) {
                words.push_back(Word(code.substr(b, i-b), chars[b]));
                b = i;
            }
        } else {
            if (!escape) {
                if (c == "\"") {
                    words.add_last(Word(code.substr(b, i-b+1), chars[b]));
                    b = i+1;
                    is_str = false;
                } else if (c == '\\') {
                    escape = true;
                }
            } else escape = false;
        }

        last := c;
        if (code[i] == "\n") {
            ++line;
            column := 1
        } else {
            ++column
        }
    };
    if (b < i) words.add_last(Word(code.substr(b, i-b), chars[b]));

    words;
}