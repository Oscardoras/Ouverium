using "../../librairies/String.fl";

using "expression/FunctionCall.fl";
using "expression/FunctionDefinition.fl";
using "expression/Property.fl";
using "expression/Symbol.fl";
using "expression/Tuple.fl";

using "Position.fl";


TextPosition : (this, line, column) \ (line ~ Int & column ~ Int) |-> {
    Position(this);
    this :~ TextPosition;

    this.line := line;
    this.column := column;

    this
};
TextPosition : (line, column) \ (line ~ Int & column ~ Int) |-> {
    TextPosition((), line, column)
};

Word : (this, position) \ (this ~ String & position ~ TextPosition) |-> {
    this :~ Word;

    this.position := position;

    this
};

is_operator : c \ (c ~ Char) |-> {
    !Char.is_alphanum(c) & !(c ~ ArrayList "_'`\".([{)]}")
};

is_number : c \ (c ~ Char) |-> {
    Char.is_digit(c) | c == Char "."
};

is_alphanumeric : c \ (c ~ Char) |-> {
    Char.is_alphanum(c) | c ~ "_\'`"
};

is_operator : str \ (str ~ String) |-> {
    ok := true;
    i := 0;
    while (ok & i < str.length()) {
        if (!is_operator(str[i])) {
            ok := false
        };
        ++i
    };
    ok
};

is_number : str \ (str ~ String) |-> {
    ok := true;
    i := 0;
    while (ok & i < str.length()) {
        if (!is_number(str[i])) {
            ok := false
        };
        ++i
    };
    ok
};

is_alphanumeric : str \ (str ~ String) |-> {
    ok := true;
    i := 0;
    while (ok & i < str.length()) {
        if (!is_alphanumeric(str[i])) {
            ok := false
        };
        ++i
    };
    ok
};

system_chars := ArrayList["->", ",", "(", ")", "[", "]", "{", "}", "\\", "|->"];

is_system : str \ (str ~ String) |-> {
    str ~ system_chars
};

get_words : code \ (code ~ String) |-> {
    words := ArrayList();

    b := 0;
    last := String "\n";

    is_str := false;
    escape := false;

    line := 1;
    column := 1;
    position := TextPosition(line, column);

    for i from 0 to (code.length()) {
        c := code[i];

        if (!is_str) {
            if (c ~ ArrayList " \n\r\t") {
                if (b < i) {
                    words.add_last(Word(code.substring(b, i-b), position))
                };
                b := i+1
            } else if (c ~ ArrayList ",()[]{}") {
                if (b < i) {
                    words.add_last(Word(code.substring(b, i-b), position))
                };
                words.add_last(Word(String(c), position));
                b := i+1
            } else if (c == Char "\"") {
                if (b < i) {
                    words.add_last(Word(code.substring(b, i-b), position))
                };
                b := i;
                is_str := true
            } else if (is_operator(last) & !is_operator(c) & b < i) {
                words.add_last(Word(code.substring(b, i-b), position));
                b := i
            } else if (is_number(last) & !is_number(c) & b < i) {
                words.add_last(Word(code.substring(b, i-b), position));
                b := i
            } else if (is_alphanumeric(last) & !is_alphanumeric(c) & b < i) {
                words.add_last(Word(code.substring(b, i-b), position));
                b := i
            }
        } else {
            if (!escape) {
                if (c == Char "\"") {
                    words.add_last(Word(code.substring(b, i-b+1), position));
                    b := i+1;
                    is_str := false
                } else if (c == Char "\\") {
                    escape := true
                }
            } else {
                escape := false
            }
        };

        last := c;
        if (code[i] == Char "\n") {
            ++line;
            column := 1
        } else {
            ++column
        };
        position := TextPosition(line, column)
    };
    if (b < i) {
        words.add_last(Word(code.substring(b, i-b), position))
    };

    words
};

get_char_priority : c \ (c ~ Char) |-> {
    if (c == Char "^") 1
    else if (c == Char "*" | c == Char "/" | c == Char "%") 2
    else if (c == Char "+" | c == Char "-") 3
    else if (c == Char "&" | c == Char "|") 5
    else if (c == Char ":") 6
    else if (c == Char ";") 7
    else 4
};

compare_operators : (a, b) \ (a ~ String, b ~ String) |-> {
    result := 0;
    i := 0;
    while (i < a.length() & i < b.length() & result != 0) {
        (a_p, b_p) := (get_char_priority(a[i]), get_char_priority(b[i]));
        if (a_p < b_p) {
            result := 1
        } else if (a_p > b_p) {
            result := -1
        };
        ++i
    }
    if (result != 0) result
    else if (a.length() < b.length()) 1
    else if (a.length() > b.length()) -1
    else 0
}