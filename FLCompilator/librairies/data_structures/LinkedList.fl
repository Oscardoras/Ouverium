include("Iterator.fl");


LinkedList : this |-> {
    this :~ LinkedList;

    private->first := ();
    private->last := ();

    this->foreach : function |-> {
        cell := private->first;
        while (cell != ()) repeat {
            function(cell->object);
            cell := cell->next
        };
        ()
    };

    this->is_empty : () |-> {
        private->first = ()
    };

    this->get_first : () like private->first != () |-> {
        private->first->object
    };

    this->get_last : () like private->last != () |-> {
        private->last->object
    };

    this->add_last : a |-> {
        tmp->object := a;
        tmp->previous := private->last;
        tmp->next := ();
        if (private->last != ()) then {
            private->last->next := tmp
        } else {
            private->first := tmp
        };
        private->last := tmp;
        ()
    };

    this->remove_last : () like private->last != () |-> {
        private->last := private->last->previous;
        if (private->last != ()) then {
            private->last->next := ()
        } else {
            private->last->previous := ();
            private->first := ()
        };
    };

    this->iterator : () |-> {
        LinkedList->Iterator((), private->first)
    };

    this
};

LinkedList->Iterator : (this, first) |-> {
    this :~ Iterator;
    this :~ LinkedList->Iterator;

    this->cell := first;

    this->has_next : () |-> {
        this->cell != ()
    };

    this->next : () like this->has_next() |-> {
        tmp := this->cell;
        this->cell := this->cell->next;
        tmp;
    };

    this
}

(@) : (element, list) |-> {
    found := false;
    it := list->iterator();
    while (!found & it->has_next()) repeat {
        if (it->next() = element) then {
            found := true
        }
    };
    found
}